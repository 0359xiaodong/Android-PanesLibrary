h1. PanesLayout

This library aims to make creating multi-pane layouts (like the 2-pane gmail app) much easier.</b>

The hierarchy of a PanesLayout looks like this:
<pre><code>|--------------------------------|
| PanesLayout                    |
| |----------------------------| |
| | PaneScrollView             | |
| | |------------------------| | |
| | | PaneView |-----------| | | |
| | |          | (content) | | | |
| | |          |-----------| | | |
| | |------------------------| | |
| |----------------------------| |
|--------------------------------|</code></pre>

A PanesLayout can hold any number of panes. Each pane is made up of a PaneScrollView (which allows the pane contents to slide left & right), a PaneView (which provides padding on the left of the content), and some content (i.e. fragment).

"Here's a YouTube video of PanesLayout in action.":http://www.youtube.com/watch?feature=player_embedded&v=Cmss0DREnj8

h2. Using PanesLayout

Variables associated with each pane:
 * type: the possible values of type are defined by the user. For example, in ExampleActivity, the only possible type is DEFAULT_PANE_TYPE. This variable is used to size the pane by the PaneSizer
 * focused: if true, then PanesLayout will never intercept touch events associated with this pane.
 * index: the index of this pane-- starting at 0, going to # of panes - 1.

To use PanesLayout, you need to first implement the following:
 * OnIndexChangedListener: gets fired when which panes are currently visible changes
 * PaneSizer: allows you to programatically size individual panes based on the index of that pane and the type of that pane.

To add/remove/get panes:
 * addPane(int type)
 * addPane(int type, boolean focused)
 * removePanes(int i): removes all panes after the ith index
 * getNumPanes(): the number of panes
 * getCurrentIndex(): the current top index
 * setIndex(int index): scroll to the pane associated with index.

h2. ExampleActivity

ExampleActivity demonstrates PanesLayout. It allows you to create any number of panes. Each pane has an ExampleFragment attached to it.

Here's what ExampleActivity implements:

 * Create a PaneSizer. This object allows the user to programatically assign width to each pane based on the index of that pane.
 * Implement OnIndexChangedListener. This allows the activity respond to changes in which panes are visible.
 * Save the state of the PanesLayout in onSaveInstanceState.
 * Inside onCreate, create all the panes saved in onSaveInstanceState. If fragments are added to those panes, set those fragments up (i.e. resetting listeners)
 * Add panes, clear panes, attach fragments to panes, etc!

h2. Classes

Java files:
 * PanesLayout: the container for all the panes
 * ExampleActivity: a simple example of the PanesLayout
 * ExampleFragment: a simple fragment that demonstrates retention of fragments and listeners.

Inner-classes (inside PanesLayout):
 * PaneScrollView: allows panes to slide left & right
 * PaneView: provides padding to the content
 * PaneSizer: this object allows the user to programatically determine the size of each pane
 * OnIndexChangedListener: this listener is fired whenever the visible panes change

<pre><code>Copyright 2013 Kenrick Rilee

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.</pre></code>